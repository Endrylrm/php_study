name: "php-dev"
services:
  phpdev:
    build:
      dockerfile: Dockerfile
      context: .
    image: endrylrm/phpdev:latest
    depends_on:
      - db
    container_name: phpdev
    hostname: phpdev
    restart: "unless-stopped"
    ports:
      - 8080:80
    environment:
      APP_DB_CONNECTION: "mysql"
      APP_DB_HOST: "mysqldb"
      APP_DB_PORT: 3306
      APP_DB_NAME: "phpdevdb"
      APP_DB_USER: "phpdev"
      APP_DB_PASSWORD: "phpdev"
      APP_MAILPIT_HOST: "mailpit"
      APP_MAILPIT_PORT: 1025
      APP_REDIS_HOST: "redis"
      APP_REDIS_PORT: 6379
    volumes:
      # onde o aplicativo PHP irá ficar
      - ./app:/app
    networks:
      - phpdev-network
  # Banco de Dados - MySQL
  db:
    image: mysql:latest
    # nome do container, quando for criado
    container_name: mysqldb
    restart: always
    hostname: mysqldb
    environment:
      MYSQL_DATABASE: "phpdevdb"
      MYSQL_USER: "phpdev"
      MYSQL_PASSWORD: "phpdev"
      MYSQL_ROOT_PASSWORD: "phpdev"
      TZ: "America/Sao_Paulo"
    ports:
      - 3306:3306
    # Dados persistentes, pegando o diretório atual, na pasta "MySQL"
    # usa um Bind Mount (Diretório da máquina local)
    volumes:
      # onde os dados do MySQL irão ficar
      - ./.docker/SQL:/var/lib/mysql
      # inicializa os arquivos SQLs, sh e sql.gz no banco de dados que irá ser criado
      - ./.docker/Scripts:/docker-entrypoint-initdb.d
    networks:
      - phpdev-network
  # Mailpit - Testar e-mails
  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    hostname: mailpit
    restart: unless-stopped
    ports:
      - 8025:8025
      - 1025:1025
    environment:
      MP_MAX_MESSAGES: 5000
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - phpdev-network
  # Redis - in memory database
  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    restart: unless-stopped
    ports:
      - 6379:6379
    networks:
      - phpdev-network
  # Opcional - PHPMyAdmin
  # PHPMyAdmin - Controlar o banco de dados
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    restart: "unless-stopped"
    ports:
      - 8081:80
    depends_on:
      - db
    networks:
      - phpdev-network
networks:
  phpdev-network:
    driver: bridge
